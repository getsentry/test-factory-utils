# NOTE: this is a hack.
# The purpose of this deployment is to proxy everything to "argo-server" service located in a different service ("argo").
# Why: Ingress needs to reference a service that sits in the same namespace ("default" at the moment), so we need a deployment
# in "default" namespace that will proxy everything to "argo-server".
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argo-workflows-proxy
data:
  default.conf: |
    upstream argo_server {
      server argo-server.argo.svc.cluster.local:2746;
    }

    upstream argo_server_with_backup {
      server argo-server.argo.svc.cluster.local:2746 max_fails=1 fail_timeout=0;
      server 127.0.0.1:8081 backup fail_timeout=0;
    }

    # FIXME: enable ssl for this location
    server {
      listen 127.0.0.1:8081;

      # ssl_certificate     www.example.com.cert;
      # ssl_certificate_key www.example.com.cert;

      return 200;
    }

    server {
      listen 8080;

      proxy_ssl_verify off;

      location / {
        proxy_pass https://argo_server;

        # Inspired by https://stackoverflow.com/questions/13672743/eventsource-server-sent-events-through-nginx
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_cache off;
        proxy_set_header Connection '';
        chunked_transfer_encoding off;
      }

      # # FIXME: an attempted fix for an annoying 502, doesn't work yet
      # location /api/v1/workflow-events/ {
      #   proxy_pass https://argo_server_with_backup;
      #   proxy_set_header Host c317-84-115-233-39.ngrok.io;

      #   proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
      #   proxy_next_upstream_tries 2;
      #   proxy_connect_timeout 5s;
      #   proxy_send_timeout 5s;
      #   proxy_read_timeout 5s;
      # }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: argo-workflows
    component: argo-workflows-proxy
  name: argo-workflows-proxy
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      service: argo-workflows
      component: argo-workflows-proxy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        service: argo-workflows
        component: argo-workflows-proxy
      annotations:
        configVersion: "{{ md5file('k8s/services/argo-workflows/deployment-proxy.yaml') }}"
    spec:
      containers:
      - image: nginx:1.20
        name: argo-workflows-proxy-nginx
        volumeMounts:
          - name: nginx-config
            mountPath: /etc/nginx/conf.d/default.conf
            subPath: default.conf
      volumes:
      - name: nginx-config
        configMap:
          name: argo-workflows-proxy
