{"apiVersion": "argoproj.io/v1alpha1", "kind": "Workflow", "metadata": {"creationTimestamp": "2022-03-17T15:55:32Z", "generateName": "metrics-ingest-consumer-load-test-", "generation": 15, "labels": {"submit-from-ui": "true", "workflows.argoproj.io/completed": "true", "workflows.argoproj.io/creator": "system-serviceaccount-argo-argo-server", "workflows.argoproj.io/phase": "Succeeded", "workflows.argoproj.io/workflow-archiving-status": "Archived", "workflows.argoproj.io/workflow-template": "metrics-ingest-consumer-load-test"}, "managedFields": [{"apiVersion": "argoproj.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:generateName": {}, "f:labels": {".": {}, "f:submit-from-ui": {}, "f:workflows.argoproj.io/creator": {}, "f:workflows.argoproj.io/workflow-template": {}}}, "f:spec": {}}, "manager": "argo", "operation": "Update", "time": "2022-03-17T15:55:32Z"}, {"apiVersion": "argoproj.io/v1alpha1", "fieldsType": "FieldsV1", "fieldsV1": {"f:metadata": {"f:labels": {"f:workflows.argoproj.io/completed": {}, "f:workflows.argoproj.io/phase": {}, "f:workflows.argoproj.io/workflow-archiving-status": {}}}, "f:status": {}}, "manager": "workflow-controller", "operation": "Update", "time": "2022-03-17T16:02:13Z"}], "name": "metrics-ingest-consumer-load-test-46drv", "namespace": "argo", "resourceVersion": "67980226", "uid": "4e343a27-1cee-497e-84de-3c1bc956ab04"}, "spec": {"arguments": {"parameters": [{"name": "test_factory_branch", "value": "main"}, {"name": "num_messages", "value": "100"}, {"name": "releases", "value": "default"}, {"name": "environments", "value": "default"}, {"name": "clear_kafka_queue", "value": "true"}, {"name": "comment", "value": ""}]}, "workflowTemplateRef": {"name": "metrics-ingest-consumer-load-test"}}, "status": {"artifactRepositoryRef": {"artifactRepository": {"archiveLogs": true, "s3": {"accessKeySecret": {"key": "accesskey", "name": "my-minio-cred"}, "bucket": "my-bucket", "endpoint": "minio:9000", "insecure": true, "secretKeySecret": {"key": "secretkey", "name": "my-minio-cred"}}}, "configMap": "artifact-repositories", "key": "default-v1", "namespace": "argo"}, "conditions": [{"status": "False", "type": "PodRunning"}, {"status": "True", "type": "Completed"}], "estimatedDuration": 219, "finishedAt": "2022-03-17T16:02:13Z", "nodes": {"metrics-ingest-consumer-load-test-46drv": {"children": ["metrics-ingest-consumer-load-test-46drv-925599451", "metrics-ingest-consumer-load-test-46drv-1411169508", "metrics-ingest-consumer-load-test-46drv-1451320639"], "displayName": "metrics-ingest-consumer-load-test-46drv", "estimatedDuration": 209, "finishedAt": "2022-03-17T16:02:03Z", "id": "metrics-ingest-consumer-load-test-46drv", "name": "metrics-ingest-consumer-load-test-46drv", "outboundNodes": ["metrics-ingest-consumer-load-test-46drv-2537781159", "metrics-ingest-consumer-load-test-46drv-1451320639"], "phase": "Succeeded", "progress": "13/13", "resourcesDuration": {"cpu": 232, "memory": 176}, "startedAt": "2022-03-17T15:59:04Z", "templateName": "main", "templateScope": "local/", "type": "DAG"}, "metrics-ingest-consumer-load-test-46drv-1103678133": {"boundaryID": "metrics-ingest-consumer-load-test-46drv", "children": ["metrics-ingest-consumer-load-test-46drv-1633693356"], "displayName": "wait-clear-kafka-queue", "estimatedDuration": 34, "finishedAt": "2022-03-17T16:01:33Z", "hostNodeName": "gke-cluster-1-default-pool-d03cc740-u0wx", "id": "metrics-ingest-consumer-load-test-46drv-1103678133", "name": "metrics-ingest-consumer-load-test-46drv.wait-clear-kafka-queue", "outputs": {"artifacts": [{"name": "main-logs", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1103678133/main.log"}}], "exitCode": "0"}, "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 61, "memory": 49}, "startedAt": "2022-03-17T16:01:00Z", "templateRef": {"name": "z-influxdb-monitor", "template": "infulxdb-monitor"}, "templateScope": "local/", "type": "Pod"}, "metrics-ingest-consumer-load-test-46drv-123180256": {"boundaryID": "metrics-ingest-consumer-load-test-46drv-1377605790", "children": ["metrics-ingest-consumer-load-test-46drv-1627655079"], "displayName": "[0]", "estimatedDuration": 10, "finishedAt": "2022-03-17T15:59:34Z", "id": "metrics-ingest-consumer-load-test-46drv-123180256", "name": "metrics-ingest-consumer-load-test-46drv.reset-and-run-migrations[0]", "phase": "Succeeded", "progress": "6/6", "resourcesDuration": {"cpu": 189, "memory": 150}, "startedAt": "2022-03-17T15:59:24Z", "templateScope": "namespaced/z-postgres", "type": "StepGroup"}, "metrics-ingest-consumer-load-test-46drv-1377605790": {"boundaryID": "metrics-ingest-consumer-load-test-46drv", "children": ["metrics-ingest-consumer-load-test-46drv-123180256"], "displayName": "reset-and-run-migrations", "estimatedDuration": 104, "finishedAt": "2022-03-17T16:00:39Z", "id": "metrics-ingest-consumer-load-test-46drv-1377605790", "inputs": {"parameters": [{"name": "sentry_sha", "value": "f2e90196aa2b064a9719fe2ed07664e3cb41e137"}]}, "name": "metrics-ingest-consumer-load-test-46drv.reset-and-run-migrations", "outboundNodes": ["metrics-ingest-consumer-load-test-46drv-1725181908"], "phase": "Succeeded", "progress": "6/6", "resourcesDuration": {"cpu": 189, "memory": 150}, "startedAt": "2022-03-17T15:59:24Z", "templateRef": {"name": "z-postgres", "template": "reset-and-run-migrations"}, "templateScope": "local/", "type": "Steps"}, "metrics-ingest-consumer-load-test-46drv-1411169508": {"boundaryID": "metrics-ingest-consumer-load-test-46drv", "children": ["metrics-ingest-consumer-load-test-46drv-1377605790", "metrics-ingest-consumer-load-test-46drv-1462024182"], "displayName": "prepare-run", "estimatedDuration": 13, "finishedAt": "2022-03-17T15:59:17Z", "hostNodeName": "gke-cluster-1-default-pool-d03cc740-m3dm", "id": "metrics-ingest-consumer-load-test-46drv-1411169508", "inputs": {"artifacts": [{"git": {"repo": "git@github.com:getsentry/test-factory", "revision": "main", "sshPrivateKeySecret": {"key": "ssh-private-key", "name": "ssh-deploy-key-test-factory"}}, "name": "test-factory-checkout", "path": "/root/test-factory"}], "parameters": [{"name": "test_factory_branch", "value": "main"}, {"name": "test_duration", "value": "30s"}, {"name": "test_users", "value": "10"}]}, "name": "metrics-ingest-consumer-load-test-46drv.prepare-run", "outputs": {"artifacts": [{"globalName": "run_manifest", "name": "run_manifest", "path": "/tmp/run-manifest.yaml", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1411169508/run_manifest.tgz"}}, {"globalName": "ingest_metrics_generator_settings", "name": "ingest-metrics-generator-settings", "path": "/tmp/ingest-metrics-generator-settings.yaml", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1411169508/ingest-metrics-generator-settings.tgz"}}, {"globalName": "test-factory-src", "name": "test-factory-src", "path": "/root/test-factory", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1411169508/test-factory-src.tgz"}}, {"name": "main-logs", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1411169508/main.log"}}], "exitCode": "0", "parameters": [{"globalName": "test_factory_sha", "name": "test_factory_sha", "value": "909f9498c54b530a399d19467ee578e0af0dc681", "valueFrom": {"path": "/tmp/test_factory_sha"}}, {"globalName": "relay_sha", "name": "relay_sha", "value": "760c683c62e2cc05677b47ffe3dd52d64ba8b460", "valueFrom": {"path": "/tmp/relay_sha"}}, {"globalName": "ingest_load_tester_sha", "name": "ingest_load_tester_sha", "value": "7078c23424394908e27873a9b31aa23d0f8f6733", "valueFrom": {"path": "/tmp/ingest_load_tester_sha"}}, {"globalName": "sentry_sha", "name": "sentry_sha", "value": "f2e90196aa2b064a9719fe2ed07664e3cb41e137", "valueFrom": {"path": "/tmp/sentry_sha"}}, {"globalName": "test_duration", "name": "test_duration", "value": "30s", "valueFrom": {"path": "/tmp/test_duration"}}, {"globalName": "test_users", "name": "test_users", "value": "10", "valueFrom": {"path": "/tmp/test_users"}}, {"globalName": "test_override", "name": "test_override", "value": "1", "valueFrom": {"path": "/tmp/test_override"}}]}, "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 20, "memory": 15}, "startedAt": "2022-03-17T15:59:04Z", "templateRef": {"name": "z-prepare-run", "template": "prepare-run"}, "templateScope": "local/", "type": "Pod"}, "metrics-ingest-consumer-load-test-46drv-1441796538": {"boundaryID": "metrics-ingest-consumer-load-test-46drv-3165747360", "children": ["metrics-ingest-consumer-load-test-46drv-1528833416"], "displayName": "[0]", "estimatedDuration": 10, "finishedAt": "2022-03-17T16:02:13Z", "id": "metrics-ingest-consumer-load-test-46drv-1441796538", "name": "metrics-ingest-consumer-load-test-46drv.onExit[0]", "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 2, "memory": 1}, "startedAt": "2022-03-17T16:02:03Z", "templateScope": "local/", "type": "StepGroup"}, "metrics-ingest-consumer-load-test-46drv-1451320639": {"boundaryID": "metrics-ingest-consumer-load-test-46drv", "displayName": "snuba-stop-all", "estimatedDuration": 4, "finishedAt": "2022-03-17T15:59:08Z", "hostNodeName": "gke-cluster-1-default-pool-d03cc740-u0wx", "id": "metrics-ingest-consumer-load-test-46drv-1451320639", "name": "metrics-ingest-consumer-load-test-46drv.snuba-stop-all", "outputs": {"artifacts": [{"name": "main-logs", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1451320639/main.log"}}], "exitCode": "0"}, "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 2, "memory": 0}, "startedAt": "2022-03-17T15:59:04Z", "templateRef": {"name": "z-snuba", "template": "snuba-stop-all"}, "templateScope": "local/", "type": "Pod"}, "metrics-ingest-consumer-load-test-46drv-1462024182": {"boundaryID": "metrics-ingest-consumer-load-test-46drv", "children": ["metrics-ingest-consumer-load-test-46drv-1654348949"], "displayName": "apply-topic-config", "estimatedDuration": 5, "finishedAt": "2022-03-17T15:59:30Z", "hostNodeName": "gke-cluster-1-default-pool-d03cc740-m3dm", "id": "metrics-ingest-consumer-load-test-46drv-1462024182", "inputs": {"artifacts": [{"name": "test-factory-src", "path": "/opt/test-factory", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1411169508/test-factory-src.tgz"}}]}, "name": "metrics-ingest-consumer-load-test-46drv.apply-topic-config", "outputs": {"artifacts": [{"name": "main-logs", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1462024182/main.log"}}], "exitCode": "0"}, "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 5, "memory": 3}, "startedAt": "2022-03-17T15:59:24Z", "templateRef": {"name": "z-kafka", "template": "apply-topic-config"}, "templateScope": "local/", "type": "Pod"}, "metrics-ingest-consumer-load-test-46drv-1505774287": {"boundaryID": "metrics-ingest-consumer-load-test-46drv-1633693356", "children": ["metrics-ingest-consumer-load-test-46drv-2537781159"], "displayName": "main", "estimatedDuration": 10, "finishedAt": "2022-03-17T16:01:53Z", "id": "metrics-ingest-consumer-load-test-46drv-1505774287", "name": "metrics-ingest-consumer-load-test-46drv.run-stats.main", "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 1, "memory": 0}, "startedAt": "2022-03-17T16:01:43Z", "templateRef": {"name": "z-run-test", "template": "run-stats-collector"}, "templateScope": "local/", "type": "Container"}, "metrics-ingest-consumer-load-test-46drv-1528833416": {"boundaryID": "metrics-ingest-consumer-load-test-46drv-3165747360", "displayName": "notify-slack", "estimatedDuration": 3, "finishedAt": "2022-03-17T16:02:06Z", "hostNodeName": "gke-cluster-1-default-pool-d03cc740-u0wx", "id": "metrics-ingest-consumer-load-test-46drv-1528833416", "inputs": {"artifacts": [{"name": "message_yaml", "path": "/etc/message.yaml", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-2537781159/slack_reporter_message_yaml.tgz"}}], "parameters": [{"name": "slack_channel", "value": "feed-qa"}, {"name": "message_text", "value": ""}, {"name": "workflow_comment", "value": ""}]}, "name": "metrics-ingest-consumer-load-test-46drv.onExit[0].notify-slack", "outputs": {"artifacts": [{"name": "main-logs", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1528833416/main.log"}}], "exitCode": "0"}, "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 2, "memory": 1}, "startedAt": "2022-03-17T16:02:03Z", "templateRef": {"name": "z-workflow-notifier", "template": "workflow-notifier"}, "templateScope": "local/", "type": "Pod"}, "metrics-ingest-consumer-load-test-46drv-1607906307": {"boundaryID": "metrics-ingest-consumer-load-test-46drv", "children": ["metrics-ingest-consumer-load-test-46drv-1103678133"], "displayName": "sentry-update-configuration", "estimatedDuration": 11, "finishedAt": "2022-03-17T16:00:50Z", "hostNodeName": "gke-cluster-1-default-pool-d03cc740-m3dm", "id": "metrics-ingest-consumer-load-test-46drv-1607906307", "inputs": {"artifacts": [{"name": "test-factory-src", "path": "/root/test-factory", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1411169508/test-factory-src.tgz"}}], "parameters": [{"name": "sentry_sha", "value": "f2e90196aa2b064a9719fe2ed07664e3cb41e137"}, {"name": "wait_for_rollout", "value": "1"}]}, "name": "metrics-ingest-consumer-load-test-46drv.sentry-update-configuration", "outputs": {"artifacts": [{"name": "main-logs", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1607906307/main.log"}}], "exitCode": "0"}, "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 18, "memory": 14}, "startedAt": "2022-03-17T16:00:39Z", "templateRef": {"name": "z-sentry", "template": "sentry-update-configuration"}, "templateScope": "local/", "type": "Pod"}, "metrics-ingest-consumer-load-test-46drv-1627655079": {"boundaryID": "metrics-ingest-consumer-load-test-46drv-1377605790", "children": ["metrics-ingest-consumer-load-test-46drv-190143637"], "displayName": "reset-postgres", "estimatedDuration": 3, "finishedAt": "2022-03-17T15:59:28Z", "hostNodeName": "gke-cluster-1-default-pool-d03cc740-m3dm", "id": "metrics-ingest-consumer-load-test-46drv-1627655079", "name": "metrics-ingest-consumer-load-test-46drv.reset-and-run-migrations[0].reset-postgres", "outputs": {"artifacts": [{"name": "main-logs", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1627655079/main.log"}}], "exitCode": "0"}, "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 2, "memory": 0}, "startedAt": "2022-03-17T15:59:24Z", "templateName": "reset-postgres", "templateScope": "namespaced/z-postgres", "type": "Pod"}, "metrics-ingest-consumer-load-test-46drv-1633693356": {"boundaryID": "metrics-ingest-consumer-load-test-46drv", "children": ["metrics-ingest-consumer-load-test-46drv-3831264531"], "displayName": "run-stats", "estimatedDuration": 5, "finishedAt": "2022-03-17T16:01:47Z", "hostNodeName": "gke-cluster-1-default-pool-d03cc740-u0wx", "id": "metrics-ingest-consumer-load-test-46drv-1633693356", "inputs": {"artifacts": [{"name": "run_report", "optional": true, "path": "/tmp/run-report.yaml"}], "parameters": [{"name": "profile", "value": "metrics-indexer"}, {"name": "start_time", "value": "2022-03-17T16:00:50Z"}, {"name": "end_time", "value": "2022-03-17T16:01:33Z"}]}, "name": "metrics-ingest-consumer-load-test-46drv.run-stats", "outputs": {"artifacts": [{"globalName": "stats_report", "name": "stats_report", "path": "/tmp/stats-report.yaml", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1633693356/stats_report.tgz"}}, {"name": "main-logs", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1633693356/main.log"}}], "exitCode": "0"}, "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 4, "memory": 3}, "startedAt": "2022-03-17T16:01:43Z", "templateRef": {"name": "z-run-test", "template": "run-stats-collector"}, "templateScope": "local/", "type": "Pod"}, "metrics-ingest-consumer-load-test-46drv-1654348949": {"boundaryID": "metrics-ingest-consumer-load-test-46drv", "children": ["metrics-ingest-consumer-load-test-46drv-1607906307"], "displayName": "run-ingest-metrics-generator", "estimatedDuration": 3, "finishedAt": "2022-03-17T15:59:38Z", "hostNodeName": "gke-cluster-1-default-pool-d03cc740-m3dm", "id": "metrics-ingest-consumer-load-test-46drv-1654348949", "inputs": {"artifacts": [{"name": "ingest_metrics_generator_settings", "path": "/etc/ingest-metrics-generator-settings.yaml", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1411169508/ingest-metrics-generator-settings.tgz"}}], "parameters": [{"name": "num_messages", "value": "100"}, {"name": "releases", "value": "default"}, {"name": "environments", "value": "default"}]}, "name": "metrics-ingest-consumer-load-test-46drv.run-ingest-metrics-generator", "outputs": {"artifacts": [{"name": "main-logs", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1654348949/main.log"}}], "exitCode": "0"}, "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 1, "memory": 0}, "startedAt": "2022-03-17T15:59:34Z", "templateRef": {"name": "z-data-generator", "template": "run-ingest-metrics-generator"}, "templateScope": "local/", "type": "Pod"}, "metrics-ingest-consumer-load-test-46drv-1725181908": {"boundaryID": "metrics-ingest-consumer-load-test-46drv-1377605790", "children": ["metrics-ingest-consumer-load-test-46drv-1607906307"], "displayName": "run-migrations", "estimatedDuration": 84, "finishedAt": "2022-03-17T16:00:29Z", "hostNodeName": "gke-cluster-1-default-pool-d03cc740-m3dm", "id": "metrics-ingest-consumer-load-test-46drv-1725181908", "inputs": {"parameters": [{"name": "sentry_sha", "value": "f2e90196aa2b064a9719fe2ed07664e3cb41e137"}]}, "name": "metrics-ingest-consumer-load-test-46drv.reset-and-run-migrations[1].run-migrations", "outputs": {"artifacts": [{"name": "main-logs", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1725181908/main.log"}}], "exitCode": "0"}, "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 103, "memory": 84}, "startedAt": "2022-03-17T15:59:34Z", "templateName": "run-migrations", "templateScope": "namespaced/z-postgres", "type": "Pod"}, "metrics-ingest-consumer-load-test-46drv-190143637": {"boundaryID": "metrics-ingest-consumer-load-test-46drv-1377605790", "children": ["metrics-ingest-consumer-load-test-46drv-1725181908"], "displayName": "[1]", "estimatedDuration": 94, "finishedAt": "2022-03-17T16:00:39Z", "id": "metrics-ingest-consumer-load-test-46drv-190143637", "name": "metrics-ingest-consumer-load-test-46drv.reset-and-run-migrations[1]", "phase": "Succeeded", "progress": "5/5", "resourcesDuration": {"cpu": 187, "memory": 150}, "startedAt": "2022-03-17T15:59:34Z", "templateScope": "namespaced/z-postgres", "type": "StepGroup"}, "metrics-ingest-consumer-load-test-46drv-2537781159": {"boundaryID": "metrics-ingest-consumer-load-test-46drv", "displayName": "prepare-slack-message", "estimatedDuration": 3, "finishedAt": "2022-03-17T16:01:56Z", "hostNodeName": "gke-cluster-1-default-pool-d03cc740-u0wx", "id": "metrics-ingest-consumer-load-test-46drv-2537781159", "inputs": {"parameters": [{"name": "start_time", "value": "2022-03-17T16:00:50Z"}, {"name": "end_time", "value": "2022-03-17T16:01:33Z"}]}, "name": "metrics-ingest-consumer-load-test-46drv.prepare-slack-message", "outputs": {"artifacts": [{"globalName": "slack_reporter_message_yaml", "name": "slack_reporter_message_yaml", "path": "/tmp/message.yaml", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-2537781159/slack_reporter_message_yaml.tgz"}}, {"name": "main-logs", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-2537781159/main.log"}}], "exitCode": "0"}, "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 1, "memory": 0}, "startedAt": "2022-03-17T16:01:53Z", "templateRef": {"name": "z-run-test", "template": "metrics-ingest-consumer-load-test-prepare-message"}, "templateScope": "local/", "type": "Pod"}, "metrics-ingest-consumer-load-test-46drv-3165747360": {"children": ["metrics-ingest-consumer-load-test-46drv-1441796538"], "displayName": "metrics-ingest-consumer-load-test-46drv.onExit", "estimatedDuration": 10, "finishedAt": "2022-03-17T16:02:13Z", "id": "metrics-ingest-consumer-load-test-46drv-3165747360", "name": "metrics-ingest-consumer-load-test-46drv.onExit", "outboundNodes": ["metrics-ingest-consumer-load-test-46drv-1528833416"], "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 2, "memory": 1}, "startedAt": "2022-03-17T16:02:03Z", "templateName": "on-exit", "templateScope": "local/", "type": "Steps"}, "metrics-ingest-consumer-load-test-46drv-3182157216": {"boundaryID": "metrics-ingest-consumer-load-test-46drv", "children": ["metrics-ingest-consumer-load-test-46drv-1462024182"], "displayName": "flush-all-kafka", "estimatedDuration": 7, "finishedAt": "2022-03-17T15:59:20Z", "hostNodeName": "gke-cluster-1-default-pool-d03cc740-u0wx", "id": "metrics-ingest-consumer-load-test-46drv-3182157216", "name": "metrics-ingest-consumer-load-test-46drv.flush-all-kafka", "outputs": {"artifacts": [{"name": "main-logs", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-3182157216/main.log"}}], "exitCode": "0"}, "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 9, "memory": 6}, "startedAt": "2022-03-17T15:59:14Z", "templateRef": {"name": "z-kafka", "template": "flush-all-kafka"}, "templateScope": "local/", "type": "Pod"}, "metrics-ingest-consumer-load-test-46drv-3831264531": {"boundaryID": "metrics-ingest-consumer-load-test-46drv-1633693356", "children": ["metrics-ingest-consumer-load-test-46drv-1505774287"], "displayName": "get-workflow-info", "estimatedDuration": 10, "finishedAt": "2022-03-17T16:01:53Z", "id": "metrics-ingest-consumer-load-test-46drv-3831264531", "name": "metrics-ingest-consumer-load-test-46drv.run-stats.get-workflow-info", "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 1, "memory": 0}, "startedAt": "2022-03-17T16:01:43Z", "templateRef": {"name": "z-run-test", "template": "run-stats-collector"}, "templateScope": "local/", "type": "Container"}, "metrics-ingest-consumer-load-test-46drv-3989528669": {"boundaryID": "metrics-ingest-consumer-load-test-46drv", "children": ["metrics-ingest-consumer-load-test-46drv-1607906307"], "displayName": "flush-all-memcached", "estimatedDuration": 4, "finishedAt": "2022-03-17T15:59:18Z", "hostNodeName": "gke-cluster-1-default-pool-d03cc740-u0wx", "id": "metrics-ingest-consumer-load-test-46drv-3989528669", "name": "metrics-ingest-consumer-load-test-46drv.flush-all-memcached", "outputs": {"artifacts": [{"name": "main-logs", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-3989528669/main.log"}}], "exitCode": "0"}, "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 2, "memory": 0}, "startedAt": "2022-03-17T15:59:14Z", "templateRef": {"name": "z-memcached", "template": "flush-all-memcached"}, "templateScope": "local/", "type": "Pod"}, "metrics-ingest-consumer-load-test-46drv-925599451": {"boundaryID": "metrics-ingest-consumer-load-test-46drv", "children": ["metrics-ingest-consumer-load-test-46drv-3989528669", "metrics-ingest-consumer-load-test-46drv-3182157216", "metrics-ingest-consumer-load-test-46drv-1377605790"], "displayName": "sentry-stop-all", "estimatedDuration": 4, "finishedAt": "2022-03-17T15:59:09Z", "hostNodeName": "gke-cluster-1-default-pool-d03cc740-u0wx", "id": "metrics-ingest-consumer-load-test-46drv-925599451", "name": "metrics-ingest-consumer-load-test-46drv.sentry-stop-all", "outputs": {"artifacts": [{"name": "main-logs", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-925599451/main.log"}}], "exitCode": "0"}, "phase": "Succeeded", "progress": "1/1", "resourcesDuration": {"cpu": 4, "memory": 2}, "startedAt": "2022-03-17T15:59:04Z", "templateRef": {"name": "z-sentry", "template": "sentry-stop-all"}, "templateScope": "local/", "type": "Pod"}}, "outputs": {"artifacts": [{"name": "run_manifest", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1411169508/run_manifest.tgz"}}, {"name": "ingest_metrics_generator_settings", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1411169508/ingest-metrics-generator-settings.tgz"}}, {"name": "test-factory-src", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1411169508/test-factory-src.tgz"}}, {"name": "stats_report", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-1633693356/stats_report.tgz"}}, {"name": "slack_reporter_message_yaml", "s3": {"key": "metrics-ingest-consumer-load-test-46drv/metrics-ingest-consumer-load-test-46drv-2537781159/slack_reporter_message_yaml.tgz"}}], "parameters": [{"name": "test_factory_sha", "value": "909f9498c54b530a399d19467ee578e0af0dc681"}, {"name": "relay_sha", "value": "760c683c62e2cc05677b47ffe3dd52d64ba8b460"}, {"name": "ingest_load_tester_sha", "value": "7078c23424394908e27873a9b31aa23d0f8f6733"}, {"name": "sentry_sha", "value": "f2e90196aa2b064a9719fe2ed07664e3cb41e137"}, {"name": "test_duration", "value": "30s"}, {"name": "test_users", "value": "10"}, {"name": "test_override", "value": "1"}]}, "phase": "Succeeded", "progress": "14/14", "resourcesDuration": {"cpu": 234, "memory": 177}, "startedAt": "2022-03-17T15:59:04Z", "storedTemplates": {"namespaced/metrics-ingest-consumer-load-test/main": {"dag": {"tasks": [{"arguments": {"parameters": [{"name": "test_factory_branch", "value": "{{workflow.parameters.test_factory_branch}}"}]}, "name": "prepare-run", "templateRef": {"name": "z-prepare-run", "template": "prepare-run"}}, {"arguments": {}, "name": "sentry-stop-all", "templateRef": {"name": "z-sentry", "template": "sentry-stop-all"}}, {"arguments": {}, "name": "snuba-stop-all", "templateRef": {"name": "z-snuba", "template": "snuba-stop-all"}}, {"arguments": {}, "depends": "sentry-stop-all", "name": "flush-all-kafka", "templateRef": {"name": "z-kafka", "template": "flush-all-kafka"}, "when": "{{workflow.parameters.clear_kafka_queue}} == true"}, {"arguments": {"artifacts": [{"from": "{{workflow.outputs.artifacts.test-factory-src}}", "name": "test-factory-src"}]}, "depends": "flush-all-kafka && prepare-run", "name": "apply-topic-config", "templateRef": {"name": "z-kafka", "template": "apply-topic-config"}, "when": "{{workflow.parameters.clear_kafka_queue}} == true"}, {"arguments": {}, "depends": "sentry-stop-all", "name": "flush-all-memcached", "templateRef": {"name": "z-memcached", "template": "flush-all-memcached"}}, {"arguments": {"parameters": [{"name": "sentry_sha", "value": "{{workflow.outputs.parameters.sentry_sha}}"}]}, "depends": "sentry-stop-all && prepare-run", "name": "reset-and-run-migrations", "templateRef": {"name": "z-postgres", "template": "reset-and-run-migrations"}}, {"arguments": {"artifacts": [{"from": "{{workflow.outputs.artifacts.ingest_metrics_generator_settings}}", "name": "ingest_metrics_generator_settings"}], "parameters": [{"name": "num_messages", "value": "{{workflow.parameters.num_messages}}"}, {"name": "releases", "value": "{{workflow.parameters.releases}}"}, {"name": "environments", "value": "{{workflow.parameters.environments}}"}]}, "depends": "apply-topic-config", "name": "run-ingest-metrics-generator", "templateRef": {"name": "z-data-generator", "template": "run-ingest-metrics-generator"}}, {"arguments": {"artifacts": [{"from": "{{workflow.outputs.artifacts.test-factory-src}}", "name": "test-factory-src"}]}, "depends": "flush-all-memcached && reset-and-run-migrations && run-ingest-metrics-generator", "name": "sentry-update-configuration", "templateRef": {"name": "z-sentry", "template": "sentry-update-configuration"}}, {"arguments": {}, "depends": "sentry-update-configuration", "name": "wait-clear-kafka-queue", "templateRef": {"name": "z-influxdb-monitor", "template": "infulxdb-monitor"}}, {"arguments": {"parameters": [{"name": "profile", "value": "metrics-indexer"}, {"name": "start_time", "value": "{{tasks.sentry-update-configuration.finishedAt}}"}, {"name": "end_time", "value": "{{tasks.wait-clear-kafka-queue.finishedAt}}"}]}, "depends": "wait-clear-kafka-queue", "name": "run-stats", "templateRef": {"name": "z-run-test", "template": "run-stats-collector"}}, {"arguments": {"parameters": [{"name": "start_time", "value": "{{tasks.sentry-update-configuration.finishedAt}}"}, {"name": "end_time", "value": "{{tasks.wait-clear-kafka-queue.finishedAt}}"}]}, "depends": "run-stats", "name": "prepare-slack-message", "templateRef": {"name": "z-run-test", "template": "metrics-ingest-consumer-load-test-prepare-message"}}]}, "inputs": {}, "metadata": {}, "name": "main", "outputs": {}}, "namespaced/z-data-generator/run-ingest-metrics-generator": {"container": {"command": ["python", "main.py", "--settings-file", "/etc/ingest-metrics-generator-settings.yaml", "--num-messages", "{{inputs.parameters.num_messages}}", "--releases", "{{inputs.parameters.releases}}", "--environments", "{{inputs.parameters.environments}}"], "image": "europe-west3-docker.pkg.dev/sentry-st-testing/main/ingest-metrics-generator:9a315c9f7d7b137132f12867b196e1dc246882d0", "name": "ingest-metrics-generator", "resources": {}}, "inputs": {"artifacts": [{"name": "ingest_metrics_generator_settings", "path": "/etc/ingest-metrics-generator-settings.yaml"}], "parameters": [{"name": "num_messages"}, {"name": "releases"}, {"name": "environments"}]}, "metadata": {}, "name": "run-ingest-metrics-generator", "outputs": {}}, "namespaced/z-influxdb-monitor/infulxdb-monitor": {"container": {"command": ["/influxdb-monitor", "--organisation", "sentry", "--bucket-name", "statsd", "--measurement", "kafka_consumer_lag"], "env": [{"name": "INFLUX_TOKEN", "valueFrom": {"secretKeyRef": {"key": "token", "name": "influx-rw"}}}, {"name": "INFLUX_URL", "value": "http://influxdb-server.default.svc.cluster.local"}], "image": "europe-west3-docker.pkg.dev/sentry-st-testing/main/influxdb-monitor:33d0298b352a9ff8e289224a268d00c388fea250", "name": "influxdb-monitor", "resources": {}}, "inputs": {}, "metadata": {}, "name": "infulxdb-monitor", "outputs": {}}, "namespaced/z-kafka/apply-topic-config": {"container": {"command": ["bash", "-c", "exec 2>&1\nset -eux\n\ncd /opt/test-factory/config/kafka\n\ntopicctl \\\n  --cluster-config cluster.yaml \\\n  apply \\\n  --skip-confirm \\\n  ./topics/*\n\necho 'Done!'\n"], "image": "europe-west3-docker.pkg.dev/sentry-st-testing/main/sentry-topicctl:d5508ec69aa38ff93b0b8e0931caacfc76a6733e", "name": "apply-topic-config", "resources": {}}, "inputs": {"artifacts": [{"name": "test-factory-src", "path": "/opt/test-factory"}]}, "metadata": {}, "name": "apply-topic-config", "outputs": {}}, "namespaced/z-kafka/flush-all-kafka": {"container": {"command": ["sh", "-c", "exec 2>&1\nset -eux\n\nBOOTSTRAP_SERVER=\"ingest-kafka.default.svc.cluster.local:9092\"\nZK_SERVER=\"ingest-kafka.default.svc.cluster.local:2181\"\n\nTOPICS_TO_DELETE=$(kafka-topics --zookeeper \"${ZK_SERVER}\" --list | grep -v '__' || true)\n\nfor TOPIC in ${TOPICS_TO_DELETE}; do\n  kafka-topics --zookeeper \"${ZK_SERVER}\" --delete --topic \"${TOPIC}\"\ndone\n\necho 'Done!'\n"], "image": "confluentinc/cp-kafka:5.1.4", "name": "flush-all-kafka", "resources": {}}, "inputs": {}, "metadata": {}, "name": "flush-all-kafka", "outputs": {}}, "namespaced/z-memcached/flush-all-memcached": {"container": {"command": ["sh", "-c", "exec 2>&1\nset -euxo pipefail\n\necho flush_all | nc -v -w 30 memcached-sentry.default.svc.cluster.local 11211\n"], "image": "busybox:1.32", "name": "flush-all-memcached", "resources": {}}, "inputs": {}, "metadata": {}, "name": "flush-all-memcached", "outputs": {}}, "namespaced/z-postgres/reset-and-run-migrations": {"inputs": {"parameters": [{"name": "sentry_sha", "value": "default"}]}, "metadata": {}, "name": "reset-and-run-migrations", "outputs": {}, "steps": [[{"arguments": {}, "name": "reset-postgres", "template": "reset-postgres"}], [{"arguments": {"parameters": [{"name": "sentry_sha", "value": "{{inputs.parameters.sentry_sha}}"}]}, "name": "run-migrations", "template": "run-migrations"}]]}, "namespaced/z-postgres/reset-postgres": {"container": {"command": ["psql", "-h", "postgres-sentry.default.svc.cluster.local", "-U", "postgres", "-c", "DROP DATABASE IF EXISTS sentry WITH (FORCE);", "-c", "CREATE DATABASE sentry;"], "image": "postgres:13-alpine", "name": "reset-postgres", "resources": {}}, "inputs": {}, "metadata": {}, "name": "reset-postgres", "outputs": {}, "serviceAccountName": "default"}, "namespaced/z-postgres/run-migrations": {"container": {"command": ["bash", "-c", "exec 2>&1\nset -euo pipefail\n\nSENTRY_SHA='{{inputs.parameters.sentry_sha}}'\nif [[ \"${SENTRY_SHA}\" == \"default\" ]]; then\n  SENTRY_IMAGE=$(kubectl get deployment -n default ingest-metrics-consumer -o jsonpath='{.spec.template.spec.containers[0].image}')\nelse\n  SENTRY_IMAGE=\"us.gcr.io/sentryio/sentry:${SENTRY_SHA}\"\nfi\n\nif [[ \"${SENTRY_IMAGE}\" != *\"us.gcr.io/sentryio/sentry\"* ]]; then\n  echo \"Incorrect Sentry image: ${SENTRY_IMAGE}\"\n  exit 1\nfi\necho \"Using Sentry image: ${SENTRY_IMAGE}\"\n\nPOD_NAME=\"run-migrations-{{workflow.uid}}\"\n\n# FIXME: extract this to a job\ncat <<EOF >/tmp/pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"${POD_NAME}\"\n  namespace: \"default\"\n  labels:\n    workflowTemplate: 'run-migrations'\nspec:\n  containers:\n    - image: \"${SENTRY_IMAGE}\"\n      name: sentry-run-migrations\n      args:\n      - upgrade\n      - --noinput\n      resources:\n        requests:\n          cpu: 500m\n          memory: 1000Mi\n        limits:\n          cpu: 2000m\n          memory: 1000Mi\n      # Note: these mounts have to be the same as for other Sentry containers\n      volumeMounts:\n        - name: sentry-config\n          mountPath: /etc/sentry/config.yml\n          subPath: config.yml\n          readOnly: true\n        - name: sentry-config\n          mountPath: /etc/sentry/sentry.conf.py\n          subPath: sentry.conf.py\n          readOnly: true\n  volumes:\n    - name: sentry-config\n      configMap:\n        name: sentry-config\n  restartPolicy: Never\nEOF\nkubectl apply -f /tmp/pod.yaml\n\necho 'Waiting for the migration to finish...'\nwhile true; do\n  PHASE=$(kubectl get pod -n default \"${POD_NAME}\" -o jsonpath='{.status.phase}')\n  if [[ \"${PHASE}\" == \"Succeeded\" ]]; then\n    echo 'Done!'\n    exit 0\n  elif [[ \"${PHASE}\" == \"Failed\" ]]; then\n    echo 'Error!'\n    kubectl desribe pod -n default \"${POD_NAME}\"\n    exit 1\n  elif [[ ${PHASE} == \"\" ]]; then\n    echo 'Something went wrong.'\n    exit 1\n  else\n    echo \"[$(date)] Waiting...\"\n    sleep 5\n  fi\ndone\n"], "image": "bitnami/kubectl:1.19", "name": "", "resources": {}}, "inputs": {"parameters": [{"name": "sentry_sha", "value": "default"}]}, "metadata": {}, "name": "run-migrations", "outputs": {}, "serviceAccountName": "default"}, "namespaced/z-prepare-run/prepare-run": {"container": {"command": ["bash", "-c", "# To avoid out of order stdout/stderr mess\nexec 2>&1\nset -euxo pipefail\n\nROOT_DIR=$(pwd)\nMANIFEST_FILE=\"${ROOT_DIR}/run-manifest.yaml\"\ncp \"${MANIFEST_FILE}\" /tmp/run-manifest.yaml\n\nDATA_GENERATOR_SETTINGS_FILE=\"${ROOT_DIR}/config/ingest-metrics-generator/settings.yaml\"\ncp \"${DATA_GENERATOR_SETTINGS_FILE}\" /tmp/ingest-metrics-generator-settings.yaml\n\nRELAY_REV_ORIGINAL=$(yq e '.relay_revision' ${MANIFEST_FILE})\nINGEST_LOAD_TESTER_REV_ORIGINAL=$(yq e '.ingest_load_tester_revision' ${MANIFEST_FILE})\n\n### Resolve test_factory revision\ngit rev-parse HEAD | tee /tmp/test_factory_sha\n\n### Resolve relay revision\nRELAY_REPO=\"https://github.com/getsentry/relay/\"\nRELAY_DIR=\"/tmp/relay\"\ngit clone \"${RELAY_REPO}\" \"${RELAY_DIR}\"\ncd \"${RELAY_DIR}\"\ngit checkout \"${RELAY_REV_ORIGINAL}\"\ngit rev-parse HEAD | tee /tmp/relay_sha\n\n### Resolve ingest-load-tester revision\nINGEST_LOAD_TESTER_REPO=\"https://github.com/getsentry/ingest-load-tester/\"\nINGEST_LOAD_TESTER_DIR=\"/tmp/ingest-load-tester\"\ngit clone \"${INGEST_LOAD_TESTER_REPO}\" \"${INGEST_LOAD_TESTER_DIR}\"\ncd \"${INGEST_LOAD_TESTER_DIR}\"\ngit checkout \"${INGEST_LOAD_TESTER_REV_ORIGINAL}\"\ngit rev-parse HEAD | tee /tmp/ingest_load_tester_sha\n\n### \"Resolve\" (FIXME) sentry revision\nSENTRY_REVISION=$(yq e '.sentry_revision' ${MANIFEST_FILE})\necho \"${SENTRY_REVISION}\" | tee /tmp/sentry_sha\n\n### Record Locust settings\nDEFAULT_STUB=\"default\"\nOVERRIDE_USED=\"0\"\nDEFAULT_DURATION=\"1m\"\nDEFAULT_USERS=5\n\nTEST_DURATION='{{inputs.parameters.test_duration}}'\nif [[ \"${TEST_DURATION}\" == \"${DEFAULT_STUB}\" ]]; then\n  TEST_DURATION=\"${DEFAULT_DURATION}\"\nelse\n  OVERRIDE_USED=\"1\"\nfi\n\nTEST_USERS='{{inputs.parameters.test_users}}'\nif [[ \"${TEST_USERS}\" == \"${DEFAULT_STUB}\" ]]; then\n  TEST_USERS=\"${DEFAULT_USERS}\"\nelse\n  OVERRIDE_USED=\"1\"\nfi\n\necho \"${TEST_DURATION}\" | tee /tmp/test_duration\necho \"${TEST_USERS}\" | tee /tmp/test_users\necho \"${OVERRIDE_USED}\" | tee /tmp/test_override\n\nset +x\n### Print out some valuable info\necho '### Manifest file'\ncat \"${MANIFEST_FILE}\"\necho '---'\n\n# To reduce the directory size when archiving\nrm -rf \"${ROOT_DIR}/.git\"\n"], "image": "europe-west3-docker.pkg.dev/sentry-st-testing/main/sentry-kube:f575c8bb772339b61bc0caa8a337dec24ddc2642", "name": "", "resources": {}}, "inputs": {"artifacts": [{"git": {"repo": "git@github.com:getsentry/test-factory", "revision": "{{inputs.parameters.test_factory_branch}}", "sshPrivateKeySecret": {"key": "ssh-private-key", "name": "ssh-deploy-key-test-factory"}}, "name": "test-factory-checkout", "path": "/root/test-factory"}], "parameters": [{"name": "test_factory_branch", "value": "main"}, {"name": "test_duration", "value": "30s"}, {"name": "test_users", "value": "10"}]}, "metadata": {}, "name": "prepare-run", "outputs": {"artifacts": [{"globalName": "run_manifest", "name": "run_manifest", "path": "/tmp/run-manifest.yaml"}, {"globalName": "ingest_metrics_generator_settings", "name": "ingest-metrics-generator-settings", "path": "/tmp/ingest-metrics-generator-settings.yaml"}, {"globalName": "test-factory-src", "name": "test-factory-src", "path": "/root/test-factory"}], "parameters": [{"globalName": "test_factory_sha", "name": "test_factory_sha", "valueFrom": {"path": "/tmp/test_factory_sha"}}, {"globalName": "relay_sha", "name": "relay_sha", "valueFrom": {"path": "/tmp/relay_sha"}}, {"globalName": "ingest_load_tester_sha", "name": "ingest_load_tester_sha", "valueFrom": {"path": "/tmp/ingest_load_tester_sha"}}, {"globalName": "sentry_sha", "name": "sentry_sha", "valueFrom": {"path": "/tmp/sentry_sha"}}, {"globalName": "test_duration", "name": "test_duration", "valueFrom": {"path": "/tmp/test_duration"}}, {"globalName": "test_users", "name": "test_users", "valueFrom": {"path": "/tmp/test_users"}}, {"globalName": "test_override", "name": "test_override", "valueFrom": {"path": "/tmp/test_override"}}]}}, "namespaced/z-run-test/metrics-ingest-consumer-load-test-prepare-message": {"container": {"command": ["bash", "-c", "exec 2>&1\nset -euxo pipefail\n\nSTART_TIME=\"{{inputs.parameters.start_time}}\"\nSTART_TIME_PRETTY=$(date -uD '%Y-%m-%dT%H:%M:%SZ' ${START_TIME})\nEND_TIME=\"{{inputs.parameters.end_time}}\"\nEND_TIME_PRETTY=$(date -uD '%Y-%m-%dT%H:%M:%SZ' ${END_TIME})\n\n### Fixme move YAML to a separate template\ncat << EOF >/tmp/message.yaml\n---\n# These blocks will be placed in the beginning of the message\nheader_blocks:\n- type: header\n  text:\n    type: plain_text\n    text: Test report\n\n# These blocks will be rendered as attachments\nattachment_blocks:\n- type: section\n  text:\n    type: mrkdwn\n    text: |\n      <https://influxdb.testa.getsentry.net/orgs/f1c58f1d769114e6/dashboards/08e15bce81229000?lower=${START_TIME}&upper=${END_TIME}|View data (InfluxDB)>\n- type: section\n  fields:\n    - type: mrkdwn\n      text: |-\n        *Test start:*\n        ${START_TIME_PRETTY}\n- type: section\n  fields:\n    - type: mrkdwn\n      text: |-\n        *Test end:*\n        ${END_TIME_PRETTY}\nEOF\n\ncat /tmp/message.yaml\n"], "image": "bash:5", "name": "metrics-ingest-consumer-load-test-prepare-message", "resources": {}}, "inputs": {"parameters": [{"name": "start_time"}, {"name": "end_time"}]}, "metadata": {}, "name": "metrics-ingest-consumer-load-test-prepare-message", "outputs": {"artifacts": [{"globalName": "slack_reporter_message_yaml", "name": "slack_reporter_message_yaml", "path": "/tmp/message.yaml"}]}}, "namespaced/z-run-test/run-stats-collector": {"containerSet": {"containers": [{"command": ["bash", "-c", "kubectl get -n argo workflow '{{workflow.name}}' -o yaml > /workspace/workflow.yaml\n"], "image": "bitnami/kubectl:1.19", "name": "get-workflow-info", "resources": {}}, {"command": ["bash", "-c", "exec 2>&1\nset -euxo pipefail\n\nPROFILE=\"{{inputs.parameters.profile}}\"\nSTART_TIME=\"{{inputs.parameters.start_time}}\"\nEND_TIME=\"{{inputs.parameters.end_time}}\"\n\nARGS=(\n  --profile\n  \"${PROFILE}\"\n  --format\n  yaml\n  --out\n  /tmp/stats-report.yaml\n)\n\nif [[ \"${START_TIME}\" != \"default\" ]] && [[ \"${END_TIME}\" != \"default\" ]]; then\n  # Use the provided start/end times\n  ARGS+=(\n    --start\n    \"${START_TIME}\"\n    --end\n    \"${END_TIME}\"\n  )\nelse\n  # Use the input file\n  ARGS+=(\n    --multistage\n    /tmp/run-report.yaml\n  )\nfi\n\ncat /workspace/workflow.yaml\n\npython stats_collector.py \"${ARGS[@]}\"\n"], "dependencies": ["get-workflow-info"], "env": [{"name": "INFLUX_TOKEN", "valueFrom": {"secretKeyRef": {"key": "token", "name": "influx-rw"}}}, {"name": "INFLUX_URL", "value": "http://influxdb-server.default.svc.cluster.local"}], "image": "europe-west3-docker.pkg.dev/sentry-st-testing/main/stats-collector:87c4c6cb527485f2d083b15d2f5eacc64e07287f", "name": "main", "resources": {}}], "volumeMounts": [{"mountPath": "/workspace", "name": "workspace"}]}, "inputs": {"artifacts": [{"name": "run_report", "optional": true, "path": "/tmp/run-report.yaml"}], "parameters": [{"name": "profile"}, {"name": "start_time", "value": "default"}, {"name": "end_time", "value": "default"}]}, "metadata": {}, "name": "run-stats-collector", "outputs": {"artifacts": [{"globalName": "stats_report", "name": "stats_report", "path": "/tmp/stats-report.yaml"}]}, "volumes": [{"emptyDir": {}, "name": "workspace"}]}, "namespaced/z-sentry/sentry-stop-all": {"container": {"command": ["kubectl", "scale", "deployment", "--namespace=default", "--replicas=0", "--selector=service=sentry", "--timeout=60s"], "image": "bitnami/kubectl:1.19", "name": "sentry-stop-all", "resources": {}}, "inputs": {}, "metadata": {}, "name": "sentry-stop-all", "outputs": {}, "serviceAccountName": "default"}, "namespaced/z-sentry/sentry-update-configuration": {"container": {"command": ["bash", "-c", "exec 2>&1\nset -euxo pipefail\n\ngit init\n\n# Update sentry version\nyq eval -i '.image_tag = \"{{inputs.parameters.sentry_sha}}\"' ./k8s/services/sentry/_values.yaml\n\n# FIXME: sentry-kube should be updated to handle this\n# sentry-kube diff-beta sentry\nsentry-kube render sentry > _sentry.yaml\n\n# Add an annotation with run ID\nyq eval '(select(.kind == \"Deployment\") | .spec.template.metadata.annotations.argoWorkflowId) = \"{{workflow.uid}}\"' _sentry.yaml > _sentry.processed.yaml\n\n# FIXME: do not hardcode namespaces\nsentry-kube kubectl apply -n default -f _sentry.processed.yaml\n\n### Wait for rollout, if told\nWAIT_FOR_ROLLOUT=$(echo \"{{inputs.parameters.wait_for_rollout}}\" | tr '[:upper:]' '[:lower:]')\nTRUTHY_VALUES=(\"1\" \"yes\" \"true\")\n\nif [[ \" ${TRUTHY_VALUES[*]} \" == *\" ${WAIT_FOR_ROLLOUT} \"* ]]; then\n  echo \"Waiting for the rollout to finish...\"\n  sentry-kube kubectl rollout status deployment --namespace=default ingest-metrics-consumer --timeout=60s\nfi\n"], "image": "europe-west3-docker.pkg.dev/sentry-st-testing/main/sentry-kube:f575c8bb772339b61bc0caa8a337dec24ddc2642", "name": "sentry-kube", "resources": {}}, "inputs": {"artifacts": [{"name": "test-factory-src", "path": "/root/test-factory"}], "parameters": [{"name": "sentry_sha", "value": "{{workflow.outputs.parameters.sentry_sha}}"}, {"name": "wait_for_rollout", "value": "1"}]}, "metadata": {}, "name": "sentry-update-configuration", "outputs": {}, "serviceAccountName": "default"}, "namespaced/z-snuba/snuba-stop-all": {"container": {"command": ["kubectl", "scale", "deployment", "--namespace=default", "--replicas=0", "--selector=service=snuba", "--timeout=60s"], "image": "bitnami/kubectl:1.19", "name": "kubectl", "resources": {}}, "inputs": {}, "metadata": {}, "name": "snuba-stop-all", "outputs": {}, "serviceAccountName": "default"}, "namespaced/z-workflow-notifier/workflow-notifier": {"container": {"command": ["bash", "-c", "exec 2>&1\nset -euxo pipefail\n\nSLACK_CHANNEL=\"{{inputs.parameters.slack_channel}}\"\nMESSAGE_TEXT=\"{{inputs.parameters.message_text}}\"\n\nARGS=(\n  --channel\n  \"${SLACK_CHANNEL}\"\n)\n\n# Normally, status will be one of Succeeded, Failed, Error.\nWORKFLOW_STATUS=\"{{workflow.status}}\"\nif [[ \"${WORKFLOW_STATUS}\" != \"Succeeded\" ]]; then\n  ARGS+=(\n    --level\n    \"danger\"\n    --text\n    \":warning: Workflow failed\"\n  )\n  exec python workflow-notifier.py \"${ARGS[@]}\"\nfi\n\nif [[ \"${MESSAGE_TEXT}\" == \"\" ]]; then\n  # Read from file\n  ARGS+=(\n    --message-file\n    /etc/message.yaml\n  )\nelse\n  # Read from CLI\n  ARGS+=(\n    --text\n    \"${MESSAGE_TEXT}\"\n  )\nfi\n\nexec python workflow-notifier.py \"${ARGS[@]}\"\n"], "env": [{"name": "NOTIFIER_SLACK_TOKEN", "valueFrom": {"secretKeyRef": {"key": "token", "name": "slack-oauth-token"}}}, {"name": "NOTIFIER_SLACK_CHANNEL", "value": "{{inputs.parameters.slack_channel}}"}, {"name": "WORKFLOW_NAME", "value": "{{workflow.name}}"}, {"name": "WORKFLOW_URL", "value": "https://run.testa.getsentry.net/archived-workflows/argo/{{workflow.uid}}"}, {"name": "WORKFLOW_ID", "value": "{{workflow.uid}}"}, {"name": "WORKFLOW_COMMENT", "value": "{{inputs.parameters.workflow_comment}}"}], "image": "europe-west3-docker.pkg.dev/sentry-st-testing/main/workflow-notifier:9bfb92fff1afd207c7728d0e480ac8bcbbcf4c95", "name": "workflow-notifier", "resources": {}}, "inputs": {"artifacts": [{"name": "message_yaml", "optional": true, "path": "/etc/message.yaml"}], "parameters": [{"name": "slack_channel", "value": "feed-qa"}, {"name": "message_text", "value": ""}, {"name": "workflow_comment", "value": ""}]}, "metadata": {}, "name": "workflow-notifier", "outputs": {}}}, "storedWorkflowTemplateSpec": {"arguments": {"parameters": [{"name": "test_factory_branch", "value": "main"}, {"name": "num_messages", "value": "100"}, {"name": "releases", "value": "default"}, {"name": "environments", "value": "default"}, {"name": "clear_kafka_queue", "value": "true"}, {"name": "comment", "value": ""}]}, "entrypoint": "main", "onExit": "on-exit", "podGC": {"strategy": "OnWorkflowCompletion"}, "synchronization": {"mutex": {"name": "relay-load-test"}}, "templates": [{"dag": {"tasks": [{"arguments": {"parameters": [{"name": "test_factory_branch", "value": "{{workflow.parameters.test_factory_branch}}"}]}, "name": "prepare-run", "templateRef": {"name": "z-prepare-run", "template": "prepare-run"}}, {"arguments": {}, "name": "sentry-stop-all", "templateRef": {"name": "z-sentry", "template": "sentry-stop-all"}}, {"arguments": {}, "name": "snuba-stop-all", "templateRef": {"name": "z-snuba", "template": "snuba-stop-all"}}, {"arguments": {}, "depends": "sentry-stop-all", "name": "flush-all-kafka", "templateRef": {"name": "z-kafka", "template": "flush-all-kafka"}, "when": "{{workflow.parameters.clear_kafka_queue}} == true"}, {"arguments": {"artifacts": [{"from": "{{workflow.outputs.artifacts.test-factory-src}}", "name": "test-factory-src"}]}, "depends": "flush-all-kafka && prepare-run", "name": "apply-topic-config", "templateRef": {"name": "z-kafka", "template": "apply-topic-config"}, "when": "{{workflow.parameters.clear_kafka_queue}} == true"}, {"arguments": {}, "depends": "sentry-stop-all", "name": "flush-all-memcached", "templateRef": {"name": "z-memcached", "template": "flush-all-memcached"}}, {"arguments": {"parameters": [{"name": "sentry_sha", "value": "{{workflow.outputs.parameters.sentry_sha}}"}]}, "depends": "sentry-stop-all && prepare-run", "name": "reset-and-run-migrations", "templateRef": {"name": "z-postgres", "template": "reset-and-run-migrations"}}, {"arguments": {"artifacts": [{"from": "{{workflow.outputs.artifacts.ingest_metrics_generator_settings}}", "name": "ingest_metrics_generator_settings"}], "parameters": [{"name": "num_messages", "value": "{{workflow.parameters.num_messages}}"}, {"name": "releases", "value": "{{workflow.parameters.releases}}"}, {"name": "environments", "value": "{{workflow.parameters.environments}}"}]}, "depends": "apply-topic-config", "name": "run-ingest-metrics-generator", "templateRef": {"name": "z-data-generator", "template": "run-ingest-metrics-generator"}}, {"arguments": {"artifacts": [{"from": "{{workflow.outputs.artifacts.test-factory-src}}", "name": "test-factory-src"}]}, "depends": "flush-all-memcached && reset-and-run-migrations && run-ingest-metrics-generator", "name": "sentry-update-configuration", "templateRef": {"name": "z-sentry", "template": "sentry-update-configuration"}}, {"arguments": {}, "depends": "sentry-update-configuration", "name": "wait-clear-kafka-queue", "templateRef": {"name": "z-influxdb-monitor", "template": "infulxdb-monitor"}}, {"arguments": {"parameters": [{"name": "profile", "value": "metrics-indexer"}, {"name": "start_time", "value": "{{tasks.sentry-update-configuration.finishedAt}}"}, {"name": "end_time", "value": "{{tasks.wait-clear-kafka-queue.finishedAt}}"}]}, "depends": "wait-clear-kafka-queue", "name": "run-stats", "templateRef": {"name": "z-run-test", "template": "run-stats-collector"}}, {"arguments": {"parameters": [{"name": "start_time", "value": "{{tasks.sentry-update-configuration.finishedAt}}"}, {"name": "end_time", "value": "{{tasks.wait-clear-kafka-queue.finishedAt}}"}]}, "depends": "run-stats", "name": "prepare-slack-message", "templateRef": {"name": "z-run-test", "template": "metrics-ingest-consumer-load-test-prepare-message"}}]}, "inputs": {}, "metadata": {}, "name": "main", "outputs": {}}, {"inputs": {}, "metadata": {}, "name": "on-exit", "outputs": {}, "steps": [[{"arguments": {"artifacts": [{"from": "{{workflow.outputs.artifacts.slack_reporter_message_yaml}}", "name": "message_yaml", "optional": true}], "parameters": [{"name": "workflow_comment", "value": "{{workflow.parameters.comment}}"}]}, "name": "notify-slack", "templateRef": {"name": "z-workflow-notifier", "template": "workflow-notifier"}}]]}], "ttlStrategy": {"secondsAfterCompletion": 259200}, "workflowTemplateRef": {"name": "metrics-ingest-consumer-load-test"}}}}
